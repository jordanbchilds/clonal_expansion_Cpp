}
dev.off()
View(CN_qnts7)
library("parallel")
nclust = 6
colgen = function(colname, alphas){
rgbmix = c(col2rgb(colname) ) / 255
rgb(rgbmix[1], rgbmix[2], rgbmix[3], alpha=alphas, max=1)
}
myBlack = function(alpha) rgb(0,0,0, alpha)
myRed = function(alphas) rgb(1,0,0, alphas)
# define simulation length and hwo often populations monitored
hour = 3600
day = 24*hour
year = 365*day
Tmax = 80*year
dtout = 7*day
Nobs = Tmax%/%dtout
Nsim = 500
# function to simulate using Gillespie Algo, from SMSB by D. Wilkinson
N = list(Pre=matrix(c(1,0,0,1,1,0,0,1,1,0), byrow=TRUE, ncol=2, nrow=5),
Post=matrix(c(2,0,0,2,0,0,0,0,1,1), byrow=TRUE, ncol=2, nrow=5) )
gen_inits = function(n=1, C0_dist, h0_dist){
copy_num = C0_dist(n)
mut_load = h0_dist(n)
return( round( c(copy_num*(1-mut_load), copy_num*mut_load)) )
}
gen_N = function(N, N.sim, C0_dist, h0_dist,
CN_controller=noController, CN_target=NULL){
NN = list()
N.temp = N
N.temp$CN_controller = CN_controller
N.temp$CN_target = CN_target
for(i in 1:N.sim){
N.temp$M = gen_inits(n=1, C0_dist, h0_dist)
NN[[i]] = N.temp
}
return(NN)
}
noController = function(x, error, theta){
theta
}
JCcontroller = function(x, error, theta, Kc=c(5e-4, 5e-4)){
theta_dash = theta
if(error>0){
theta_dash[1:2] = theta[1:2]*2/(1+exp(error*Kc[1:2]))
} else {
theta_dash[1:2] = theta[1:2]*(1+exp(-1*error*Kc[1:2]))/2
}
return( theta_dash )
}
hazard = function(x, error=0, CN_controller=noController, tpre_mat,
theta=c(3.06e-8, 3.06e-8, 3.06e-8, 3.06e-8, 0)){
CN_controller(x, error, theta)*apply(choose(x, tpre_mat ), 2, prod)
}
gillespied_mtDNA = function(N, Tmax, dtout){     vb
tt = 0
n = Tmax%/%dtout
nyear = (365*24*3600)%/%dtout
x = N$M
S = t(N$Post - N$Pre)
tPre = t(N$Pre)
u = nrow(S)
v = as.integer( ncol(S) )
xmat = matrix(ncol=u, nrow=n)
i = 1L
target = 0
CN_controller = N$CN_controller
CN_target = ifelse(is.null(N$CN_target), sum(x), N$CN_target)
repeat{
error = sum(x) - CN_target
h = hazard(x, error, CN_controller=CN_controller, tpre_mat=tPre)
h0 = sum(h)
if( h0 < 1e-10 ) tt = 1e99
else tt = tt + rexp(1, h0)
while( tt >= target ){
xmat[i,] = x
i = i + 1L
target = target + dtout
if( i>n ){
Cnum = xmat[,1]+xmat[,2]
mload = xmat[,2]/Cnum
return( cbind(Cnum, mload))
}
}
j = sample(1:v,1L,prob=h)
x = x + S[,j]
}
}
timeslice_quantiles = function(time_index, sims, sim_index,
quantiles=c(0.025, 0.25,0.5, 0.75, 0.975)){
Nsim = length(sims)
time_sample = double(Nsim)
for(i in seq_along(1:Nsim)){
time_sample[i] = sims[[i]][time_index,sim_index]
}
quantile(na.omit(time_sample), quantiles)
}
list2matrix = function(list, by.row=TRUE){
if(by.row) return( matrix(unlist(list), byrow=by.row, nrow=length(list)) )
else return( matrix(unlist(list), byrow=by.row, ncol=length(list)) )
}
quantile_plotter = function(qnts, xstart=NULL, xfreq=NULL, qnt_col=NULL){
Nqnts = ncol(qnts)
mid = Nqnts%/%2
lwds = c(1:(mid+1), mid:1)
ltys = c((mid+1):1, 2:(mid+1))
alphas = lwds/(mid+1)
cols = colgen(qnt_col, alphas)
if(length(qnt_col)==1) qnt_col = rep(qnt_col, ncol(qnts))
for(i in 1:ncol(qnts)) lines(ts(qnts[,i], start=xstart, frequency=xfreq),
lwd=lwds[i], lty=ltys[i],
col=cols[i])
}
simulation_plotter = function(sims, simdex, quantiles=NULL,
x.lim=NULL, y.lim=NULL,
main=NULL, x.lab=NULL, y.lab=NULL,
cex.main=NULL, cex.lab=NULL, cex.axis=NULL,
xstart=NULL, xfreq=NULL,
sim_col="black", sim_alpha=0.02, qnt_cols="red"){
plot(NA, xlim=x.lim, ylim=y.lim, main=main,
xlab=x.lab, ylab=y.lab,
cex.lab=1.3, cex.main=1.5)
for(i in 1:length(sims)){
lines(ts(sims[[i]][,simdex], start=xstart, frequency=xfreq),
col=colgen(sim_col, sim_alpha))
}
quantile_plotter(quantiles, xstart, xfreq, qnt_cols)
}
#####
## h0 ~ beta(8,25), C0 ~ N(1000,100^2), JCcontroller
#####
NN_sim4 = gen_N(N, Nsim, CN_controller=JCcontroller,
C0_dist=function(n){rnorm(n,1000,100)}, h0_dist=function(n){rbeta(n,8,25)})
cl  = makeCluster(nclust)
{
clusterExport(cl, c("gillespied_mtDNA", "JCcontroller"))
simmy4 = parLapply(cl, NN_sim4, gillespied_mtDNA, Tmax, dtout, JCcontroller)
CN_qnts4 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy4, 1))
ML_qnts4 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy4, 2))
}
stopCluster(cl)
gillespied_mtDNA = function(N, Tmax, dtout){
tt = 0
n = Tmax%/%dtout
nyear = (365*24*3600)%/%dtout
x = N$M
S = t(N$Post - N$Pre)
tPre = t(N$Pre)
u = nrow(S)
v = as.integer( ncol(S) )
xmat = matrix(ncol=u, nrow=n)
i = 1L
target = 0
CN_controller = N$CN_controller
CN_target = ifelse(is.null(N$CN_target), sum(x), N$CN_target)
repeat{
error = sum(x) - CN_target
h = hazard(x, error, CN_controller=CN_controller, tpre_mat=tPre)
h0 = sum(h)
if( h0 < 1e-10 ) tt = 1e99
else tt = tt + rexp(1, h0)
while( tt >= target ){
xmat[i,] = x
i = i + 1L
target = target + dtout
if( i>n ){
Cnum = xmat[,1]+xmat[,2]
mload = xmat[,2]/Cnum
return( cbind(Cnum, mload))
}
}
j = sample(1:v,1L,prob=h)
x = x + S[,j]
}
}
cl  = makeCluster(nclust)
{
clusterExport(cl, c("gillespied_mtDNA", "JCcontroller"))
simmy4 = parLapply(cl, NN_sim4, gillespied_mtDNA, Tmax, dtout, JCcontroller)
CN_qnts4 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy4, 1))
ML_qnts4 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy4, 2))
}
stopCluster(cl)
#####
## h0 ~ beta(8,25), C0 ~ N(100,25^25), JC controller
#####
NN_sim6 = gen_N(N, Nsim, CN_controller=JCcontroller,
C0_dist=function(n){rnorm(n,100,25)}, h0_dist=function(n){rbeta(n,8,25)})
tt = gillespied_mtDNA(NN_sim6, Tmax, dtout)
tt = gillespied_mtDNA(NN_sim6[[1]], Tmax, dtout)
tt
cl  = makeCluster(nclust)
{
clusterExport(cl, c("gillespied_mtDNA", "JCcontroller"))
simmy4 = parLapply(cl, NN_sim4, gillespied_mtDNA, Tmax, dtout, JCcontroller)
CN_qnts4 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy4, 1))
ML_qnts4 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy4, 2))
}
stopCluster(cl)
cl  = makeCluster(nclust)
{
clusterExport(cl, c("gillespied_mtDNA", "hazard"))
simmy4 = parLapply(cl, NN_sim4, gillespied_mtDNA, Tmax, dtout, JCcontroller)
CN_qnts4 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy4, 1))
ML_qnts4 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy4, 2))
}
stopCluster(cl)
hazard
gillespied_mtDNA = function(N, Tmax, dtout){
tt = 0
n = Tmax%/%dtout
nyear = (365*24*3600)%/%dtout
x = N$M
S = t(N$Post - N$Pre)
tPre = t(N$Pre)
u = nrow(S)
v = as.integer( ncol(S) )
xmat = matrix(ncol=u, nrow=n)
i = 1L
target = 0
CN_controller = N$CN_controller
CN_target = ifelse(is.null(N$CN_target), sum(x), N$CN_target)
repeat{
error = sum(x) - CN_target
h = hazard(x=x, error=error, CN_controller=CN_controller, tpre_mat=tPre)
h0 = sum(h)
if( h0 < 1e-10 ) tt = 1e99
else tt = tt + rexp(1, h0)
while( tt >= target ){
xmat[i,] = x
i = i + 1L
target = target + dtout
if( i>n ){
Cnum = xmat[,1]+xmat[,2]
mload = xmat[,2]/Cnum
return( cbind(Cnum, mload))
}
}
j = sample(1:v,1L,prob=h)
x = x + S[,j]
}
}
NN_sim1 = gen_N(N, Nsim,
C0_dist=function(n){rep(1000,n)}, h0_dist=function(n){rep(0.5,n)})
cl  = makeCluster(nclust)
{
clusterExport(cl, c("gillespied_mtDNA", "hazard"))
simmy1 = parLapply(cl, NN_sim1, gillespied_mtDNA, Tmax, dtout)
CN_qnts = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy1, 1))
ML_qnts = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy1, 2))
}
stopCluster(cl)
#####
NN_sim2 = gen_N(N, Nsim, CN_controller=noController,
C0_dist=function(n){rep(1000,n)}, h0_dist=function(n){rbeta(n,2,25)})
cl  = makeCluster(nclust)
{
clusterExport(cl, c("gillespied_mtDNA", "hazard"))
simmy2 = parLapply(cl, NN_sim2, gillespied_mtDNA, Tmax, dtout)
CN_qnts2 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy2, 1))
ML_qnts2 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy2, 2))
}
stopCluster(cl)
NN_sim3 = gen_N(N, Nsim, CN_controller=noController,
C0_dist=function(n){rep(1000,n)}, h0_dist=function(n){rbeta(n,25,2)})
cl  = makeCluster(nclust)
{
clusterExport(cl, c("gillespied_mtDNA", "hazard"))
simmy3 = parLapply(cl, NN_sim3, gillespied_mtDNA, Tmax, dtout)
CN_qnts3 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy3, 1))
ML_qnts3 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy3, 2))
}
stopCluster(cl)
#####
## h0 ~ beta(8,25), C0 ~ N(1000,100^2), JCcontroller
#####
NN_sim4 = gen_N(N, Nsim, CN_controller=JCcontroller,
C0_dist=function(n){rnorm(n,1000,100)}, h0_dist=function(n){rbeta(n,8,25)})
cl  = makeCluster(nclust)
{
clusterExport(cl, c("gillespied_mtDNA", "hazard"))
simmy4 = parLapply(cl, NN_sim4, gillespied_mtDNA, Tmax, dtout, JCcontroller)
CN_qnts4 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy4, 1))
ML_qnts4 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy4, 2))
}
stopCluster(cl)
NNsim4[[1]]
NN_+sim4[[1]]
NN_sim4[[1]]
NN_sim4 = gen_N(N, Nsim, CN_controller=JCcontroller,
C0_dist=function(n){rnorm(n,1000,100)}, h0_dist=function(n){rbeta(n,8,25)})
cl  = makeCluster(nclust)
{
clusterExport(cl, c("gillespied_mtDNA", "hazard"))
simmy4 = parLapply(cl, NN_sim4, gillespied_mtDNA, Tmax, dtout)
CN_qnts4 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy4, 1))
ML_qnts4 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy4, 2))
}
stopCluster(cl)
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy4, simdex=1, quantiles=CN_qnts4,
x.lab="Time (years)", y.lab="Copy Number",
y.lim=c(0,1.5*max(CN_qnts4)), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy4, simdex=2, quantiles=ML_qnts4,
x.lab="Time (years)", y.lab="Mutation Load",
y.lim=c(0,1), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
png("gillcon_CN.png", width=10, height=8, units="in", pointsize=20, res=100)
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy4, simdex=1, quantiles=CN_qnts4,
x.lab="Time (years)", y.lab="Copy Number",
y.lim=c(0,1.5*max(CN_qnts4)), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
dev.off()
png("gillcon_ML.png", width=10, height=8, units="in", pointsize=20, res=100)
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy4, simdex=2, quantiles=ML_qnts4,
x.lab="Time (years)", y.lab="Mutation Load",
y.lim=c(0,1), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
dev.off()
#####
## h0 ~ beta(8,25), C0 ~ N(100,25^25), JC controller
#####
NN_sim6 = gen_N(N, Nsim, CN_controller=JCcontroller,
C0_dist=function(n){rnorm(n,100,25)}, h0_dist=function(n){rbeta(n,8,25)})
cl  = makeCluster(nclust)
{
clusterExport(cl, c("gillespied_mtDNA", "hazard"))
simmy6 = parLapply(cl, NN_sim6, gillespied_mtDNA, Tmax, dtout, JCcontroller, 1000)
CN_qnts6 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy6, 1))
ML_qnts6 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy6, 2))
}
stopCluster(cl)
cl  = makeCluster(nclust)
{
clusterExport(cl, c("gillespied_mtDNA", "hazard"))
simmy6 = parLapply(cl, NN_sim6, gillespied_mtDNA, Tmax, dtout)
CN_qnts6 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy6, 1))
ML_qnts6 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy6, 2))
}
stopCluster(cl)
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy6, simdex=1, quantiles=CN_qnts6,
x.lab="Time (years)", y.lab="Copy Number",
y.lim=c(0,1.5*max(CN_qnts6)), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy6, simdex=2, quantiles=ML_qnts6,
x.lab="Time (years)", y.lab="Mutation Load",
y.lim=c(0,1), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
png("gillcon_target_CN.png", width=10, height=8, units="in", pointsize=20, res=100)
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy6, simdex=1, quantiles=CN_qnts6,
x.lab="Time (years)", y.lab="Copy Number",
y.lim=c(0,1.5*max(CN_qnts6)), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
dev.off()
png("gillson_target_ML.png", width=10, height=8, units="in", pointsize=20, res=100)
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy6, simdex=2, quantiles=ML_qnts6,
x.lab="Time (years)", y.lab="Mutation Load",
y.lim=c(0,1), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
dev.off()
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy4, simdex=2, quantiles=ML_qnts4,
x.lab="Time (years)", y.lab="Mutation Load",
y.lim=c(0,1), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
#####
## h0 ~ beta(8,25), C0 ~ N(100,25^25), JC controller
#####
NN_sim6 = gen_N(N, Nsim, CN_controller=JCcontroller, CN_target=1000,
C0_dist=function(n){rnorm(n,100,25)}, h0_dist=function(n){rbeta(n,8,25)})
cl  = makeCluster(nclust)
{
clusterExport(cl, c("gillespied_mtDNA", "hazard"))
simmy6 = parLapply(cl, NN_sim6, gillespied_mtDNA, Tmax, dtout)
CN_qnts6 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy6, 1))
ML_qnts6 = list2matrix(parLapply(cl, as.list(1:Nobs), timeslice_quantiles, simmy6, 2))
}
stopCluster(cl)
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy6, simdex=1, quantiles=CN_qnts6,
x.lab="Time (years)", y.lab="Copy Number",
y.lim=c(0,1.5*max(CN_qnts6)), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy6, simdex=2, quantiles=ML_qnts6,
x.lab="Time (years)", y.lab="Mutation Load",
y.lim=c(0,1), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
png("gillespie figures/gillcon_target_CN.png", width=10, height=8, units="in", pointsize=20, res=100)
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy6, simdex=1, quantiles=CN_qnts6,
x.lab="Time (years)", y.lab="Copy Number",
y.lim=c(0,1.5*max(CN_qnts6)), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
dev.off()
png("gillespie figures/gillson_target_ML.png", width=10, height=8, units="in", pointsize=20, res=100)
{
par(mar=c(5,5,2,2))
simulation_plotter(simmy6, simdex=2, quantiles=ML_qnts6,
x.lab="Time (years)", y.lab="Mutation Load",
y.lim=c(0,1), x.lim=c(0,80),
cex.main=2.5, cex.lab=2.5, cex.axis=2.5,
xstart=Tmax/(year*Nobs), xfreq=(Nobs*year)/Tmax)
}
dev.off()
tt =6
-tt
abs
matrix(c(1,0,0,1,1,0,0,1,1,0), byrow=TRUE, ncol=2, nrow=5)
curve(dgamma(x, 5, 1), from=0, to10)
curve(dgamma(x, 5, 1), from=0, to=10)
curve(dgamma(x, 3, 1), from=0, to=10, lwd=3)
curve(dgamma(x, 3, 1), from=0, to=20, lwd=3)
curve(dgamma(x, 5, 1), from=0, to=20, lwd=3, add=TRUE, col="blue")
curve(dgamma(x, 5, 3), from=0, to=20, lwd=3, add=TRUE, col="blue")
curve(dgamma(x, 5, 0.1), from=0, to=20, lwd=3, add=TRUE, col="blue")
curve(dgamma(x, 5, 0.5), from=0, to=20, lwd=3, add=TRUE, col="blue")
curve(dgamma(x, 5, 0.5), from=0, to=20, lwd=3, col="blue")
lambda = 5
curve(x->(1-exp(-lambda*x)), from=0, to=1)
curve(x->1-exp(-lambda*x), from=0, to=1)
log(10)
gwd()
wd()
setwd("~/Documents/C++/Stochastic Simulation/TESTS")
unif = read.table("./check_uniform.txt", header=FALSE)
unif
unif = read.table("./check_uniform.txt", header=FALSE)[,1]
unif
?hist
hist(unif, breaks=seq(0,1,0.01))
hist(unif, breaks=seq(0,1,0.01), freq=FALSE)
unif = read.table("./check_uniform.txt", header=FALSE)[,1]
hist(unif, breaks=seq(0,1,0.01), freq=FALSE)
disc = read.table("./check_discrete.txt", header=FALSE)[,1]
table(disc)
disc = read.table("./check_discrete.txt", hedaer=FALSE)[,1]
disc = read.table("./check_discrete.txt", header=FALSE)[,1]
table(disc)
hour = 3600
day = 24*hour
year = 365*day
step = day
Tmax = 80*year
?floor
Niter = floor(Tmax/step) + 1
Niter
80*year
day
Niter
# gen some fake data
myBlack = function(alpha){ rgb(0,0,0, alpha) }
Ndata = 1e3
times = c(25,55,65)
mut_load = c(rnorm(Ndata, 0.4, 0.03), rnorm(Ndata, 0.8, 0.03), rnorm(Ndata, 0.9, 0.02))
# mut_load[,1] = rnorm(Ndata, 0.4, 0.03)
# mut_load[,2] = rnorm(Ndata, 0.8, 0.03)
# mut_load[,3] = rnorm(Ndata, 0.9, 0.02)
copy_num = round(c(rnorm(Ndata, 1000, 30), rnorm(Ndata, 950, 50), rnorm(Ndata, 1050, 60)))
# copy_num[,1] = rnorm(Ndata, 1000, 30)
# copy_num[,2] = rnorm(Ndata, 950, 50)
# copy_num[,3] = rnorm(Ndata, 1050, 60)
write.csv(mut_load, file="./simulated_data/mut_load_v.csv", row.names=FALSE)
setwd("~/Documents/GitHub/clonal_expansion_Cpp/Gillespie")
setwd("~/Documents/GitHub/clonal_expansion_Cpp/ABC_SMC")
write.csv(mut_load, file="./simulated_data/mut_load_v.csv", row.names=FALSE)
write.csv(copy_num, file="./simulated_data/copy_num_v.csv", row.names=FALSE)
